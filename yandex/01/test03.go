package main

import (
	"fmt"
)
/*
–Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–¥—Ä–æ–±–Ω–µ–µ üëâ
Different number of lines: out = 2, corr = 5
*/
const (
	place  = 0
	target = 4
)

type Grasshopper struct {
	P int
	T int
} // –∑–Ω–∞–µ—Ç —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ª–∏–Ω–µ–π–∫–µ

type Jumper interface {
	WhereAmI() int      // –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É–∑–Ω–µ—á–∏–∫–∞ –Ω–∞ –ª–∏–Ω–µ–π–∫–µ
	Jump() (int, error) // –∫—É–∑–Ω–µ—á–∏–∫ –ø—Ä—ã–≥–∞–µ—Ç –∫ –∑–µ—Ä–Ω—É. –í—ã–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É–∑–Ω–µ—á–∏–∫–∞, –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç –∑–µ—Ä–Ω–æ
}

func (g *Grasshopper) WhereAmI() int {
	return g.P
}

func (g *Grasshopper) Jump() (int, error) {
	tar := g.T
	pl := g.P
	fin := tar - pl
	if fin == 0 {
		return pl, fmt.Errorf("–≤–∫—É—Å–Ω–æ–µ –∑–µ—Ä–Ω—ã—à–∫–æ")
	} 
		if fin < 5 {
			pl += fin
		} else {
			pl += 5
		}
	
	g.P =  pl
	return  pl, nil
}

func PlaceJumper(place, target int) Jumper {
	gr := Grasshopper{
		P: place,
		T: target,
	}
	return Jumper(&gr)
}

func main() {
	g := PlaceJumper(place, target)
	fmt.Println(g.WhereAmI())
	for {
		currPlace, err := g.Jump()
		if err != nil {
			break
		}
		fmt.Println(currPlace)
	}
}
